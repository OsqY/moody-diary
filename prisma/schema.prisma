// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clerkId   String         @unique
  email     String         @unique
  entries   JournalEntry[]
  Analysis  Analysis[]
  Task      Task[]
  UserCosts UserCosts[]
}

enum TaskPriority {
  LOW
  MID
  HIGH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Task {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  title      String
  content    String       @db.Text
  priority   TaskPriority @default(LOW)
  status     TaskStatus   @default(PENDING)
  finishedAt DateTime     @default(now())

  @@unique([userId, id])
}

model JournalEntry {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  content  String    @db.Text
  analysis Analysis?

  @@unique([userId, id])
}

model Analysis {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entryId String
  entry   JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  mood           String
  summary        String  @db.Text
  color          String
  negative       Boolean
  subject        String
  sentimentScore Float   @default(0)

  @@unique([entryId])
  @@index([userId])
}

model UserCosts {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Expenses Expenses[]
  Incomes  Incomes[]

  @@unique([userId])
  @@index([id])
}

model Expenses {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount      Float
  description String
  category    String

  userCostsId String
  userCosts   UserCosts @relation(fields: [userCostsId], references: [id])

  @@unique([userCostsId])
  @@index([id])
}

model Incomes {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount      Float
  description String
  category    String

  userCostsId String
  userCosts   UserCosts @relation(fields: [userCostsId], references: [id])

  @@unique([userCostsId])
  @@index([id])
}
